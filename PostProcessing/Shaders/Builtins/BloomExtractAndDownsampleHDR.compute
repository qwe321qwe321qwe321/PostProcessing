// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel main

#include "../StdLib.hlsl"
#include "../Colors.hlsl"
#include "../Sampling.hlsl"

#define RGBToLuminance Luminance

//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
// Developed by Minigraph
//
// Author:  James Stanard 
//
// The CS for extracting bright pixels and downsampling them to an unblurred bloom buffer.

SamplerState sampler_SourceTex : register(s0);
Texture2D<float3> SourceTex : register(t0);
RWTexture2D<float3> BloomResult : register(u0);

cbuffer cb0
{
    float2 g_inverseOutputSize;
    float g_Clamp;
    float4 g_bloomThreshold;
}

//
// Quadratic color thresholding
// curve = (threshold - knee, knee * 2, 0.25 / knee)
//
float3 QuadraticThreshold(float3 color, float threshold, float3 curve)
{
    // Pixel brightness
    float br = max(max(color.r, color.g), color.b);

    // Under-threshold part: quadratic curve
    float rq = clamp(br - curve.x, 0.0, curve.y);
    rq = curve.z * rq * rq;

    // Combine and apply the brightness response curve.
    const float kEpsilon = 1.0e-4;
    color *= max(rq, br - threshold) / max(br, kEpsilon);

    return color;
}

[numthreads(8, 8, 1)]
void main(uint3 DTid : SV_DispatchThreadID)
{
    // We need the scale factor and the size of one pixel so that our four samples are right in the middle
    // of the quadrant they are covering.
    float2 uv = (DTid.xy + 0.5) * g_inverseOutputSize;
    float2 offset = g_inverseOutputSize * 0.25;

    // Use 4 bilinear samples to guarantee we don't undersample when downsizing by more than 2x
    float3 color1 = SourceTex.SampleLevel(sampler_SourceTex, uv + float2(-offset.x, -offset.y), 0);
    float3 color2 = SourceTex.SampleLevel(sampler_SourceTex, uv + float2(offset.x, -offset.y), 0);
    float3 color3 = SourceTex.SampleLevel(sampler_SourceTex, uv + float2(-offset.x, offset.y), 0);
    float3 color4 = SourceTex.SampleLevel(sampler_SourceTex, uv + float2(offset.x, offset.y), 0);

    color1 = min(g_Clamp, QuadraticThreshold(color1, g_bloomThreshold.x, g_bloomThreshold.yzw));
    color2 = min(g_Clamp, QuadraticThreshold(color2, g_bloomThreshold.x, g_bloomThreshold.yzw));
    color3 = min(g_Clamp, QuadraticThreshold(color3, g_bloomThreshold.x, g_bloomThreshold.yzw));
    color4 = min(g_Clamp, QuadraticThreshold(color4, g_bloomThreshold.x, g_bloomThreshold.yzw));
    
    // Box filter.
    BloomResult[DTid.xy] = 0.25 * (color1 + color2 + color3 + color4);
}
